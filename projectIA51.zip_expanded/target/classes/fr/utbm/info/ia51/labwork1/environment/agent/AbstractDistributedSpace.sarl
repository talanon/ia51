/* 
 * $Id$
 * 
 * Copyright (c) 2015-17 Stephane GALLAND.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labwork1.environment.^agent

import io.janusproject.kernel.repository.UniqueAddressParticipantRepository
import io.janusproject.kernel.^space.SpaceBase
import io.janusproject.services.distributeddata.DMap
import io.janusproject.services.distributeddata.DistributedDataStructureService
import io.janusproject.services.executor.ExecutorService
import io.janusproject.services.logging.LogService
import io.janusproject.services.network.NetworkService
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.lang.util.SynchronizedSet
import io.sarl.util.Collections3

import java.io.Serializable
import java.util.UUID

import com.google.inject.Inject

/** Abstract implementation of a distributed space.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
package abstract class AbstractDistributedSpace extends SpaceBase {

	/** Name of the shared attribute that is the ID of the creator of the space.
	 */
	protected static val KEY_CREATORID = "creatorID" //$NON-NLS-1$

	/** Repository of the agents in the space.
	 */
	protected val agents : UniqueAddressParticipantRepository<UUID> 

	/** Shared attributes in the space.
	 */
	protected val sharedAttributes : DMap<String, Serializable> 

	/** The logging service.
	 */
	@Inject
	protected var logger : LogService 

	@Inject
	var executorService : ExecutorService 

	@Inject
	var network : NetworkService 

	/**
	 * @param id - the identifier of the space.
	 * @param factory - the factory to be used for creating distributed data structures.
	 */
	new (id : SpaceID, factory : DistributedDataStructureService) {
		super(id)
		//assert (id != null);
		this.agents = new UniqueAddressParticipantRepository(
				this.ID.ID.toString + "-mazespace-agents", //$NON-NLS-1$
				factory)
		this.sharedAttributes = factory.getMap(this.ID.ID.toString + "-mazespace-attributes") //$NON-NLS-1$
	}

	def getParticipants : SynchronizedSet<UUID> {
		synchronized (this.agents) {
			Collections3::unmodifiableSynchronizedSet(this.agents.participantIDs)
		}
	}

	def getCreatorID : UUID {
		this.sharedAttributes.get(KEY_CREATORID) as UUID
	}

	/** Do the emission of the event on the local event bus.
	 *
	 * @param event - the event to emit.
	 * @param scope - the scope.
	 * @return <code>true</code> if the event was dispatched on the local bus.
	 */
	protected def putOnEventBus(^event : Event, scope : UUID) : boolean {
		synchronized (this.agents) {
			for (^agent : this.agents.listeners) {
				if (scope == ^agent.ID) {
					fireAsync(^agent, ^event)
					return true
				}
			}
			return false
		}
	}

	/** Do the emission of the event over the network.
	 *
	 * @param event - the event to emit.
	 * @param scope - the scope.
	 */
	protected def putOnNetwork(^event : Event, scope : UUID) {
		try {
			this.network.publish(new UUIDScope(scope), ^event)
		} catch (e : Exception) {
			this.logger.error(
					"CANNOT_NOTIFY_OVER_NETWORK", scope, ^event, e) //$NON-NLS-1$
		}
	}

	/** Send the event to the given listener asyncronously.
	 *
	 * @param agent - the listener to notify.
	 * @param event - the event to send.
	 */
	protected def fireAsync(^agent : EventListener, ^event : Event) {
		this.executorService.submit(new AsyncRunner(^agent, ^event))
	}

	/** Implement a scope matching a single UUID.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	protected static class UUIDScope implements Scope<UUID> {

		val id : UUID 

		/**
		 * @param id - the identifier.
		 */
		new (id : UUID) {
			this.id = id
		}

		/** Replies the identifier that is matched by this scope.
		 *
		 * @return the identifier.
		 */
		def getID : UUID {
			this.id
		}

		def matches(element : UUID) : boolean {
			this.id == element
		}

	}

	/**
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class AsyncRunner implements Runnable {

		val ^agent : EventListener 
		val ^event : Event 

		/**
		 * @param agent
		 * @param event
		 */
		new (^agent : EventListener, ^event : Event) {
			this.^agent = ^agent
			this.^event = ^event
		}

		def run {
			this.^agent.receiveEvent(this.^event)
		}

		def toString : String {
			"[agent=" + this.^agent + "; event=" + this.^event + "]"
		}

	}

}