/* 
 * $Id$
 * 
 * Copyright (c) 2015-17 Stephane GALLAND.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labwork1.environment.^agent

import io.janusproject.services.distributeddata.DistributedDataStructureService
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID

import java.util.UUID
import fr.utbm.info.ia51.labwork1.environment.maze.Direction

/** Abstract implementation of a distributed space.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
package class DefaultMazeSpaceImpl extends AbstractDistributedSpace implements MazeSpace {

	var environmentAgent : EventListener 
	
	/**
	 * @param id - the identifier of the space.
	 * @param factory - the factory to be used for creating distributed data structures.
	 * @param environmentAgent - the reference to the agent listener which is managing the environment,
	 * or <code>null</code> if the current instance of the space is not directly linked to the
	 * environment agent.
	 */
	new (id : SpaceID, factory : DistributedDataStructureService, environmentAgent : EventListener) {
		super(id, factory)
		this.environmentAgent = environmentAgent
	}

	def destroy {
		if (this.environmentAgent !== null) {
			this.environmentAgent = null
			this.sharedAttributes.remove(KEY_CREATORID)
		}
	}

	def spawnBody(binder : EventListener) {
		synchronized (this.agents) {
			this.agents.registerParticipant(binder.getID(), binder);
		}
	}

	def killBody(binder : EventListener) {
		synchronized (this.agents) {
			this.agents.unregisterParticipant(binder)
		}
	}

	def notifyPerception(perception : Perception) {
		var id = perception.bodyId
		if (!putOnEventBus(perception, id)) {
			putOnNetwork(perception, id)
		}
	}

	def influence(influenceTime : int, emitter : UUID, influence : Direction) {
		var ^event = new Action(influenceTime, influence)
		^event.source = new Address(this.ID, emitter)
		if (this.environmentAgent !== null) {
			fireAsync(this.environmentAgent, ^event)
		} else {
			putOnNetwork(^event, this.creatorID)
		}
	}

	def eventReceived(^space : SpaceID, scope : Scope<?>, ^event : Event) {
		if (scope instanceof UUIDScope) {
			var id = scope.ID
			putOnEventBus(^event, id)
		} else {
			this.logger.error(
					"INVALID_SCOPE", scope, ^event); //$NON-NLS-1$
		}
	}
	
}