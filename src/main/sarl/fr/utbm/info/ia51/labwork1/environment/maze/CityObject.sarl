/* 
 * $Id$
 * 
 * Copyright (c) 2015-17 Stephane GALLAND.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.labwork1.environment.maze

import java.io.Serializable
import java.lang.ref.WeakReference
import java.util.Objects

import org.eclipse.xtext.xbase.lib.Pure
import fr.utbm.info.ia51.framework.math.Point2i

/**
 * Object in the PacMan environment.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class CityObject implements Serializable {

	val position : Point2i
	
	transient val maze : WeakReference<Maze> 
	
	new (x : int, y : int, maze : Maze) {
		this.position = new Point2i(x, y)
		this.maze = new WeakReference(maze)
	}

	new (position : Point2i, maze : Maze) {
		this(position.x, position.y, maze)
	}
	
	@Pure
	def equals(obj : Object) : boolean {
		if (obj == this) {
			return true;
		}
		if (obj !== null && this.class == obj.class) {
			var o = obj as CityObject
			return o.position == this.position
		}
		return false
	}
	
	@Pure
	def hashCode : int {
		Objects.hash(position)
	}
	
	/** Replies the position of the object.
	 * 
	 * @return the position.
	 */
	@Pure
	def getPosition : Point2i {
		this.position.clone()
	}
	
	/** Change the position of the object.
	 */
	package def setPosition(x : int, y : int) : void {
		this.position.set(x, y)
	}

	/** Replies the maze in which this object is located.
	 * 
	 * @return the maze.
	 */
	@Pure
	package def getMaze : Maze {
		this.maze?.get
	}

	/** Replies if this object occludes other objects during the agent's perception.
	 */
	@Pure
	abstract def isOccluder : boolean 

}
