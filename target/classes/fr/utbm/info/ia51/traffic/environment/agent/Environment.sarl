package fr.utbm.info.ia51.labwork1.environment.^agent

import fr.utbm.info.ia51.framework.math.Point2i
import fr.utbm.info.ia51.labwork1.environment.maze.CityObject
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.Scopes
import java.util.Collections
import java.util.TreeMap
import java.util.logging.Logger

/** Definition of the agent that is managing the environment.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
agent Environment {

	on Initialize {
		var width = occurrence.parameters.get(0) as Integer
		var height = occurrence.parameters.get(1) as Integer
		var nbCars = occurrence.parameters.get(2) as Integer
		var perceptionDistance = occurrence.parameters.get(3) as Integer
		for (i : 4..<occurrence.parameters.size) {
			var o = occurrence.parameters.get(i)
			if (o instanceof EnvironmentListener) {
				this.listeners += o
			}
		}
		for (i : 0..<nbCars) {
			//mettre un faible random pour faire pop les gov
			var driverBody = createDriver(perceptionDistance)
	
		}
	}

	on Destroy {

	}
	
	on Action [occurrence.time >= time] {
		synchronized(this) {
			this.actions += new CityChangeQuery(occurrence.source.UUID, occurrence.direction)
			
			if (this.actions.size >= bodyCount - 1) {
				//emit(new RunEndOfStep, Scopes.addresses(defaultAddress))
			}
		}
	}
}